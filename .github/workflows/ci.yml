# Copyright 2025 Hewlett Packard Enterprise Development LP

name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  # Only allows one build per each workflow & branch/PR/tag.
  # https://docs.github.com/en/actions/using-jobs/using-concurrency
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:

  build:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    permissions:
      contents: write
      packages: read
      statuses: write
      pages: write
      id-token: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
      - uses: gradle/actions/setup-gradle@v4

      - name: Run CodeNarc
        run: |
          ./gradlew codenarcMain codenarcTest --continue || true

      - name: Upload CodeNarc Reports
        uses: actions/upload-artifact@v4
        with:
          name: codenarc-reports
          path: |
            build/reports/codenarc/main.xml
            build/reports/codenarc/main.html

      # Install Gitleaks (latest version)
      - name: Install Gitleaks
        run: |
          GITLEAKS_VERSION=$(curl -s https://api.github.com/repos/gitleaks/gitleaks/releases/latest | jq -r .tag_name)
          curl -sL "https://github.com/gitleaks/gitleaks/releases/download/${GITLEAKS_VERSION}/gitleaks_${GITLEAKS_VERSION#v}_linux_x64.tar.gz" -o gitleaks.tar.gz
          tar -xvf gitleaks.tar.gz
          sudo mv gitleaks /usr/local/bin/

      # Run Gitleaks scan
      - name: Run Gitleaks Scan
        run: |
          gitleaks detect \
            --source . \
            --report-format json \
            --no-banner \
            --report-path gitleaks-report.json \
            --verbose 
        continue-on-error: true

      # upload report as artifact
      - name: Upload Gitleaks Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json
      # Fail workflow if leaks were found
      - name: Fail if leaks detected
        if: success()  # only run this after previous steps
        run: |
          if grep -q '"StartLine":' gitleaks-report.json; then
            echo "Gitleaks found secrets! Failing the workflow."
            exit 1
          fi

      - name: Build and assemble the project artifacts
        run: ./gradlew build

  publish-to-artifactory:
          # if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'

      - name: Install JFrog CLI v1.54.1
        run: |
          JFROG_VERSION=1.54.1
          curl -fL "https://releases.jfrog.io/artifactory/jfrog-cli/v1/${JFROG_VERSION}/jfrog-cli-linux-amd64/jfrog" -o jfrog
          chmod +x jfrog
          sudo mv jfrog /usr/local/bin/
          jfrog --version

      - name: Build with Gradle
        env:
          ARTIFACTORY_USER: ${{ secrets.CI_USER_MORPHEUS }}
          ARTIFACTORY_PASSWORD: ${{ secrets.CI_TOKEN_MORPHEUS }}
          ARTIFACTORY_URL: ${{ secrets.ARTIFACTORY_URL }}
        run: |
          ./gradlew --version
          ./gradlew buildEnvironment | grep artifactory
          ./gradlew tasks | grep artifactory
          ./gradlew uploadToArtifactory --stacktrace --info --debug

  publish-test-summary:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Summarize Test Results
        run: |
          echo "### Test Summary" | tee -a $GITHUB_STEP_SUMMARY
          echo '```' | tee -a $GITHUB_STEP_SUMMARY
          ./gradlew testSummary --console=plain -Dorg.gradle.logging.level=quiet | sed 's/\x1b\[[0-9;]*m//g' | tee -a $GITHUB_STEP_SUMMARY
          echo '```' | tee -a $GITHUB_STEP_SUMMARY
        env:
          TERM: dumb
